objective: >
  Build a web application that uses AI agents to generate optimized shopping lists,
  considering store layouts, current pantry inventory, and recipes sourced from websites or entered manually.

tech_stack:
  common:
    - docker
    - docker-compose
    - git
    - github
  backend:
    - Python
    - poetry
    - Django
    - Django Rest Framework
    - PostgreSQL
    - Nginx
  frontend:
    - TypeScript
    - React
    - Tailwind CSS
    - Material UI
  ai_agents:
    - LLMs (e.g., GPT) for recipe parsing, ingredient matching, and learning user preferences

milestones:
  - name: Setup backend project
    description: >
      Set up the backend project structure, virtual environment, and initial dependencies.
    tasks:
      - Initialize a new Django project
      - Set up a PostgreSQL database
      - Install dependencies
      - Create initial project structure
      - Set up Docker Compose
    acceptance criteria:
      - Project structure is set up
      - PostgreSQL database is configured
      - Dependencies are installed
      - Docker Compose is set up
      - Initial project structure is created
      - Project can be started by running `docker compose up`
      - Repository dev readme is populated with the initial setup instructions

  - name: Setup frontend project
    description: >
      Set up the frontend project structure, virtual environment, and initial dependencies.
    tasks:
      - Initialize a new React project
      - Install dependencies
      - Create initial project structure
      - Set up Docker Compose
    acceptance criteria:
      - Project structure is set up
      - Dependencies are installed
      - Docker Compose is set up
      - Initial project structure is created
      - Project can be started by running `docker compose up`
      - Repository dev readme is populated with the initial setup instructions

  - name: Initial Data Models and Related Objects
    description: >
      Define the core data models for users, their places (inventory), ingredients, recipes, and shops.
    tasks:
      - Define `User` model (custom, override default Django user model)
      - Define `UserStash` model:
        - Represents user ingredient "stashes".
        - Many-to-one relationship with `User` (owner).
        - Many-to-many relationship with `User` for collaborators (with fine-grained permissions: view, manage for each user and related models (e.g., Ingredient, Recipe, etc.)).
      - Define `UnitCategory` enum:
        - Categories: Volumetric, Mass, Other
      - Define `Unit` model:
        - Fields: `name` (CharField), `category` (UnitCategory).
        - Values within categories (e.g., "grams", "milliliters", "teaspoon").
        - Many-to-one relationship with `User`.
      - Define `UnitConversion` model:
        - Fields: `from_unit` (ForeignKey to Unit), `to_unit` (ForeignKey to Unit), `conversion_factor` (DecimalField).
        - Example: 1000ml = 1L
        - Many-to-one relationship with `User`.
      - Define `IngredientCategory` model:
        - List of common categories (e.g., Spices, Fruit, Meat, Dairy, Vegetables).
      - Define `Ingredient` model:
        - Fields: `name` (CharField), `unit` (ForeignKey to Unit or CharField with choices), `value` (DecimalField), `category` (ForeignKey to IngredientCategory).
        - Many-to-one relationship with `UserPlace`.
      - Define `Recipe` model:
        - Fields: `name` (CharField), `description` (TextField).
        - Many-to-one relationship with `User` (creator).
        - Many-to-many relationship with `Ingredient` (through a `RecipeIngredient` intermediate model specifying quantity/unit for the recipe).
      - Define `RecipeInstruction` model:
        - Fields: `text` (TextField), `order` (IntegerField).
        - Many-to-one relationship with `Recipe`.
      - Define `Shop` model:
        - Fields: `user` (Many-to-one relationship with `User`), `name` (CharField).
        - Define `ShoppingAlley` model:
          - Fields: `name` (CharField), `order` (IntegerField).
          - Many-to-one relationship with `Shop`.
          - Many-to-one relationship with `User` (or `Shop` related to `User` directly).
    acceptance criteria:
      - All models (`User`, `UserStash`, `UnitCategory` enum, `Unit`, `UnitConversion`, `IngredientCategory`, `Ingredient`, `Recipe`, `RecipeIngredient`, `RecipeInstruction`, `Shop`, `ShoppingAlley`) are defined in appropriate `models.py` files within Django apps.
      - Relationships between models are correctly established using Django's ORM fields (ForeignKey, ManyToManyField, OneToOneField where applicable).
      - Necessary fields and their types (CharField, TextField, IntegerField, DecimalField, etc.) are defined for each model.
      - Enum/choices for `UnitCategory` are defined.
      - Fine-grained permissions for `UserStash` collaboration are outlined or implemented.
      - Initial database migration files are generated successfully using `makemigrations`.
      - Migrations can be applied successfully using `migrate`.

  - name: Extract ingredients from recipes
    description: >
      Implement an AI agent that parses recipe text and extracts structured ingredients (name, quantity, unit).
    tasks:
      - Allow users to paste a recipe as plain text or provide a recipe URL
      - Use an AI agent to extract structured ingredient data
      - Normalize ingredient names and match to known products

  - name: Match ingredients with pantry inventory
    description: >
      Compare required ingredients with the user’s current inventory to determine what needs to be purchased.
    tasks:
      - Compare quantities and units between ingredients and inventory
      - Compute quantity differences and prepare shopping list
      - Exclude ingredients already sufficiently stocked

  - name: Optimize shopping list based on store layout
    description: >
      Sort the shopping list according to the user’s selected store layout.
    tasks:
      - Retrieve the store layout associated with the user
      - Assign categories to each product
      - Sort the shopping list based on the store’s section order

  - name: Web interface and authentication
    description: >
      Build a responsive web interface with user registration, login, and session management.
    tasks:
      - Develop backend API using Django (with Django Rest Framework)
      - Build frontend using React + Tailwind CSS
      - Implement authentication (JWT or session-based)
      - Allow users to manage recipes, stores, inventory, and preferences

  - name: Personalization and habit learning
    description: >
      Track and learn from user corrections (e.g., category changes, quantity/unit edits).
    tasks:
      - Store user-specific corrections as `UserCorrection` entries
      - Apply learned preferences in future AI decisions
      - Allow users to view, edit, or reset their personalization data

  - name: (Optional) Promotions and price optimization
    description: >
      Integrate store circulars or APIs to recommend the cheapest options for products on the list.
    tasks:
      - Implement scrapers or integrations with store APIs
      - Map list products to current store promotions
      - Generate an alternate, price-optimized shopping list
